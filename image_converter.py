# -*- coding: utf-8 -*-
"""Image_Converter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YvSA7SX7pKEXYoHqrPbghRGsuhU8v5u3
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import os
import librosa
import librosa.display
import matplotlib.pyplot as plt

# %matplotlib inline
import shutil

# %pip install ffmpeg
from pydub import AudioSegment
import soundfile as sf

frameSize = 2048
hopSize = 512

s = set()
lenw = 0


def create_spectrogram(audio_file, image_file, folder):
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    fig.subplots_adjust(left=0, right=1, bottom=0, top=1)

    y, sr = librosa.load(audio_file)
    ms = librosa.feature.melspectrogram(y=y, sr=sr, n_fft=frameSize)
    log_ms = librosa.power_to_db(ms, ref=np.max)
    librosa.display.specshow(log_ms, sr=sr)

    fig.savefig(folder + image_file)
    plt.close(fig)


# Add Argument for Target Folder
def getAudioLength(audiofile, audioclass, train):
    aug_path = "processed_audio"
    if train == 0:
        aug_path += "_val"
    extension = audiofile.split(".")[-1]
    # print(audiofile)
    if "new" in audiofile:
        return
    newfile = (
        audiofile[: audiofile.rfind("/") + 1]
        + "new_"
        + audiofile[audiofile.rfind("/") + 1 :]
    )
    audiofile2 = audiofile
    try:
        audio = AudioSegment.from_file(file=audiofile, format=extension)
    except:
        y, fs = sf.read(audiofile)
        sf.write(newfile, y, fs)
        audio = AudioSegment.from_file(file=newfile, format=extension)
        audiofile2 = newfile
    padded_audio = AudioSegment.silent(duration=4000)
    padded_audio = padded_audio.overlay(
        AudioSegment.from_file(audiofile2).set_frame_rate(22050).set_channels(1)
    )[0:4000]
    aug_file = (
        f"{os.getcwd()}/audio_dataset/{aug_path}/{audioclass}/pro_"
        + audiofile[audiofile.rfind("/") + 1 : audiofile.rfind(".")]
        + ".wav"
    )
    padded_audio.export(out_f=aug_file, format="wav")
    global lenw
    lenw = max(lenw, audio.duration_seconds)
    return


currdir = os.getcwd()

currdir = os.getcwd()

train = f"{currdir}/audio_dataset/train"
try:
    os.mkdir(f"{currdir}/audio_dataset/processed_audio")
except:
    pass

for audioclass in os.listdir(train):
    classdir = os.path.join(train, audioclass)
    if os.path.isdir(classdir):
        files = os.listdir(classdir)
        try:
            os.mkdir(f"{currdir}/audio_dataset/processed_audio/{audioclass}")
        except:
            pass
        if ".DS_Store" in files:
            files.remove(".DS_Store")
        for audiofile in sorted(
            files, key=lambda file: int(file[file.rfind("_") + 1 : file.rfind(".")])
        ):
            audio = os.path.join(classdir, audiofile)
            # print(audio)
            getAudioLength(audio, audioclass, 1)
        print(classdir, "over")

# print(s)
# print(c)
print(lenw)

validation = f"{currdir}/audio_dataset/val"
try:
    os.mkdir(f"{currdir}/audio_dataset/processed_audio_val")
except:
    pass

for audioclass in os.listdir(validation):
    classdir = os.path.join(validation, audioclass)
    if os.path.isdir(classdir):
        files = os.listdir(classdir)
        try:
            os.mkdir(f"{currdir}/audio_dataset/processed_audio_val/{audioclass}")
        except:
            pass
        if ".DS_Store" in files:
            files.remove(".DS_Store")
        for audiofile in sorted(
            files, key=lambda file: int(file[file.rfind("_") + 1 : file.rfind(".")])
        ):
            audio = os.path.join(classdir, audiofile)
            # print(audio)
            getAudioLength(audio, audioclass, 0)
        print(classdir, "over")

# print(s)
# print(c)
# print(lenw)

try:
    os.mkdir(currdir + "/spectrograms")
except FileExistsError:
    shutil.rmtree(currdir + "/spectrograms")
    os.mkdir(currdir + "/spectrograms")

proc_audio = f"{currdir}/audio_dataset/processed_audio/"

for audioclass in os.listdir(proc_audio):
    classdir = os.path.join(proc_audio, audioclass)
    if os.path.isdir(classdir):
        file_count = 0
        files = os.listdir(classdir)
        if ".DS_Store" in files:
            files.remove(".DS_Store")
        for audiofile in sorted(
            files, key=lambda file: int(file[file.rfind("_") + 1 : file.rfind(".")])
        ):
            audio = os.path.join(classdir, audiofile)
            # print(audio)
            try:
                os.mkdir(currdir + "/spectrograms/" + audioclass)
            except:
                pass
            create_spectrogram(
                audio,
                audioclass + f"_{file_count}.png",
                f"{currdir}/spectrograms/{audioclass}/",
            )
            file_count += 1
        print(classdir, "over")

try:
    os.mkdir(currdir + "/spectrograms_val")
except FileExistsError:
    shutil.rmtree(currdir + "/spectrograms_val")
    os.mkdir(currdir + "/spectrograms_val")

proc_audio_val = f"{currdir}/audio_dataset/processed_audio_val/"

for audioclass in os.listdir(proc_audio_val):
    classdir = os.path.join(proc_audio_val, audioclass)
    if os.path.isdir(classdir):
        file_count = 0
        files = os.listdir(classdir)
        if ".DS_Store" in files:
            files.remove(".DS_Store")
        for audiofile in sorted(
            files, key=lambda file: int(file[file.rfind("_") + 1 : file.rfind(".")])
        ):
            audio = os.path.join(classdir, audiofile)
            # print(audio)
            try:
                os.mkdir(currdir + "/spectrograms_val/" + audioclass)
            except:
                pass
            create_spectrogram(
                audio,
                audioclass + f"_{file_count}.png",
                f"{currdir}/spectrograms_val/{audioclass}/",
            )
            file_count += 1
        print(classdir, "over")
